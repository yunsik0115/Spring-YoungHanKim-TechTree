#required.item.itemName=상품 이름은 필수입니다.
# range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
# max.item.quantity=수량은 최대 {0} 까지 허용합니다.
# totalPriceMin=가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==ObjectError==
#Level1

totalPriceMin.item=상품의 가격 * 수량의 합은 {0}원 이상이어야 합니다. 현재 값 = {1}

#Level2 - 생략
totalPriceMin=전체 가격은 {0}원 이상이어야 합니다. 현재 값 = {1}

#==FieldError==
#Level1
required.item.itemName=상품 이름은 필수입니다.
range.item.price=가격은 {0} ~ {1} 까지 허용합니다.
max.item.quantity=수량은 최대 {0} 까지 허용합니다.
#Level2 - 생략
#Level3
required.java.lang.String = 필수 문자입니다.
required.java.lang.Integer = 필수 숫자입니다.
min.java.lang.Integer = {0} 이상의 숫자를 입력해주세요.
range.java.lang.String = {0} ~ {1} 까지의 문자를 입력해주세요.
range.java.lang.Integer = {0} ~ {1} 까지의 숫자를 입력해주세요.
max.java.lang.String = {0} 까지의 문자를 허용합니다.
max.java.lang.Integer = {0} 까지의 숫자를 허용합니다.
min.java.lang.String = {0} 이상의 문자를 입력해주세요.

#Level4
required = 필수 값 입니다.
min= {0} 이상이어야 합니다.
range= {0} ~ {1} 범위를 허용합니다. max= {0} 까지 허용합니다

# required 와 같이 공통 처리 필요한건 공통처리 필요(아닌 경우 범용성 떨어짐)
# 오류코드는 자세히, 범용적으로 두 경우의 수 모두 처리 가능
# 단순하게 만들면 세밀하게 작성하기 어렵고, 너무 자세하게 만들어도 범용성이 떨어짐
# 범용적으로 사용하다가, 좀 디테일이 필요하다 싶은 경우 메세지에 단계를 두는게 좋다

typeMismatch.java.lang.Integer = 숫자를 입력하세요
typeMismatch = 타입 오류입니다.

#Bean Validation 처리
NotBlank={0} 공백 X
Range={0}, {2} ~ {1} 허용
Max={0}, 최대 {1}